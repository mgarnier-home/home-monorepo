name: Publish version
run-name: "${{ inputs.app-name }}, increment : ${{ inputs.version-upgrade }}"

on:
  workflow_dispatch:
    inputs:
      version-upgrade:
        description: "How to upgrade the version"
        required: true
        type: choice
        options:
          - "false"
          - "patch"
          - "minor"
          - "major"
      app-name:
        description: "The name of the application"
        required: true
        default: "none"
        type: choice
        options:
          - "autosaver"
          - "dashboard"
          - "node-proxy"
          - "nodesight"
          - "stats-api"
          - "syslog-app"
          - "traefik-conf"
          - "all"

jobs:
  get-apps-to-build:
    runs-on: ubuntu-latest
    name: Get apps to build
    outputs:
      apps-names: ${{ steps.get-app-name.outputs.apps-names }}
    steps:
      - name: Get app names
        id: get-app-name
        run: |
          if [ "${{ inputs.app-name }}" == "all" ]; then
            echo "apps-names=[\"autosaver\", \"dashboard\", \"node-proxy\", \"nodesight\", \"stats-api\", \"syslog-app\", \"traefik-conf\"]" >> $GITHUB_OUTPUT
          else
            echo "apps-names=[\"${{ inputs.app-name }}\"]" >> $GITHUB_OUTPUT
          fi

  build-app-version:
    runs-on: linux/${{ matrix.platform }}
    name: Build version
    needs: get-apps-to-build
    strategy:
      matrix:
        platform:
          - amd64
          - arm64
        app: ${{ fromJSON(needs.get-apps-to-build.outputs.apps-names) }}
    outputs:
      new-version: ${{ steps.increment-version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get versions of app from docker hub
        uses: mgarnier11/gh-actions/get-docker-versions@latest
        id: get-docker-versions
        with:
          api-url: https://hub.docker.com/v2/repositories
          image-author: mgarnier11
          image-name: ${{ matrix.app }}
      - name: Increment the version
        uses: mgarnier11/gh-actions/increment-version@latest
        id: increment-version
        with:
          version: ${{ steps.get-docker-versions.outputs.latest-version }}
          upgrade: ${{ inputs.version-upgrade }}
      - name: Print the new version
        run: echo "${{ steps.increment-version.outputs.new-version }}"
      - name: Print architecture
        run: echo "${{ runner.os }} ${{ runner.arch }} ${{ runner.platform }}"
      - name: Build application sources
        run: >
          echo "
          docker build
          -t build
          --build-arg APP=${{ matrix.app }}
          --build-arg APP_VERSION=${{ steps.increment-version.outputs.new-version }}
          -f docker/build.Dockerfile
          .
          "
      - name: Build application runtime
        run: >
          echo "
          docker build
          -t mgarnier11/${{ matrix.app }}:${{ matrix.platform }}
          -f apps/${{ matrix.app }}/docker/Dockerfile
          .
          "
      - name: Push application runtime
        run: |
          docker push mgarnier11/${{ matrix.app }}:${{ matrix.platform }}

  publish-app-version:
    runs-on: ubuntu-latest
    name: Publish version
    needs:
      - get-apps-to-build
      - build-app-version
    strategy:
      matrix:
        app: ${{ fromJSON(needs.get-apps-to-build.outputs.apps-names) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish version ${{ needs.build-version.outputs.new-version }} for ${{ matrix.app }}
        run: >
          echo "
          docker buildx imagetools create
          --tag mgarnier11/${{ matrix.app }}:latest
          --tag mgarnier11/${{ matrix.app }}:${{ needs.build-version.outputs.new-version }}
          mgarnier11/${{ matrix.app }}:amd64
          mgarnier11/${{ matrix.app }}:arm64
          "
