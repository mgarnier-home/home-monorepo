name: Publish version
run-name: Publish ${{ inputs.app-name }} and increment version with ${{ inputs.version-upgrade }}

on:
  workflow_dispatch:
    inputs:
      version-upgrade:
        description: "How to upgrade the version"
        required: true
        type: choice
        options:
          - "false"
          - "patch"
          - "minor"
          - "major"
      app-name:
        description: "The name of the application"
        required: true
        default: "none"
        type: choice
        options:
          - "autosaver"
          - "dashboard"
          - "node-proxy"
          - "nodesight"
          - "stats-api"
          - "syslog-app"
          - "traefik-conf"

jobs:
  build-version:
    runs-on: ${{ matrix.platform }}
    name: Build version
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get versions of app from docker hub
        uses: mgarnier11/gh-actions/get-docker-versions@latest
        id: get-docker-versions
        with:
          api-url: https://hub.docker.com/v2/repositories
          image-author: mgarnier11
          image-name: ${{ inputs.app-name }}
      - name: Increment the version
        uses: mgarnier11/gh-actions/increment-version@latest
        id: increment-version
        with:
          version: ${{ steps.get-docker-versions.outputs.latest-version }}
          upgrade: patch
      - name: Print the new version
        run: echo "${{ steps.increment-version.outputs.new-version }}"
      - name: Print architecture
        run: echo "${{ runner.os }} ${{ runner.arch }} ${{ runner.platform }}"
      - name: Build application sources
        run: |
          docker build -t build --build-arg APP=${{ inputs.app-name }} --build-arg APP_VERSION=${{ steps.increment-version.outputs.new-version }} -f docker/build.Dockerfile .
      - name: Build application runtime
        run: |
          docker build -t mgarnier11/${{ inputs.app-name }}:${{ steps.increment-version.outputs.new-version }} --platform ${{ matrix.platform }} -f apps/${{ inputs.app-name }}/docker/Dockerfile .
      - name: Push application runtime
        run: |
          docker push mgarnier11/${{ inputs.app-name }}:${{ steps.increment-version.outputs.new-version }}

  publish-version:
    runs-on: ubuntu-latest
    name: Publish version
    needs: build-version
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Build application executable
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .

      #     push: false
      #     tags: build
      #     build-args: |
      #       APP=${{ inputs.app-name }}
      #       APP_VERSION=${{ steps.increment-version.outputs.new-version }}
      #     file: docker/build.Dockerfile
      # - name: Build application runtime
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     push: false
      #     tags: mgarnier11/${{ inputs.app-name }}:${{ steps.increment-version.outputs.new-version }}
      #     file: apps/${{ inputs.app-name }}/docker/Dockerfile
